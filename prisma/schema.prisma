generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Brand {
  id             Int              @id @default(autoincrement()) @db.UnsignedInt
  name           String?          @db.VarChar(11)
  ProductCodeMap ProductCodeMap[]
  shopList       Shop[]
}

model Customer {
  id                  Int               @id @default(autoincrement()) @db.UnsignedInt
  shopId              Int?              @db.UnsignedInt
  name                String?           @db.VarChar(4)
  phone               String?           @db.VarChar(16)
  isMarketingAgree    Boolean?
  eventAgree          Boolean?
  createdAt           DateTime?         @default(now()) @db.Timestamp(0)
  updatedAt           DateTime?         @default(now()) @db.Timestamp(0)
  Shop                Shop?             @relation(fields: [shopId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "Customer_ibfk_1")
  customerAddressList CustomerAddress[]
  sizeRequest         SizeRequest[]

  @@index([phone], map: "phone_index")
  @@index([name], map: "customer_name_index")
  @@index([shopId], map: "shopId")
}

model CustomerTag {
  id         Int  @id @default(autoincrement()) @db.UnsignedInt
  customerId Int? @db.UnsignedInt
  tagId      Int? @db.UnsignedInt
  storyId    Int? @db.UnsignedInt
}

model CustomerTagStory {
  id        Int  @id @default(autoincrement()) @db.UnsignedInt
  createdAt Int?
  updatedAt Int?
}

model RequestItem {
  id             Int           @id @default(autoincrement()) @db.UnsignedInt
  requestId      Int?          @db.UnsignedInt
  orderAddressId Int?          @db.UnsignedInt
  count          Int
  color          String?       @db.VarChar(10)
  productCode    String        @default("") @db.VarChar(20)
  productSize    String        @default("") @db.VarChar(20)
  comment        String?       @default("") @db.VarChar(1000)
  orderCount     Int?
  keepCount      Int?
  alterComment   String?       @db.VarChar(255)
  createdAt      DateTime?     @default(now()) @db.Timestamp(0)
  updatedAt      DateTime?     @default(now()) @db.Timestamp(0)
  alterPosition  String?       @db.VarChar(10)
  alterMount     Float?        @db.Float
  isReorder      Boolean?
  isReady        Boolean?
  requestCount   Int?          @db.UnsignedInt
  arrivedCount   Int?          @db.UnsignedInt
  orderAddress   OrderAddress? @relation(fields: [orderAddressId], references: [id], onUpdate: NoAction, map: "RequestItem_ibfk_2")
  sizeRequest    SizeRequest?  @relation(fields: [requestId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "RequestItem_ibfk_1")

  @@index([productCode], map: "product_code_idx")
  @@index([productSize], map: "product_size_idx")
  @@index([requestId], map: "requestId")
  @@index([comment], map: "comment_idx")
  @@index([orderAddressId], map: "orderAddressId")
}

model Seller {
  id              Int           @id @default(autoincrement()) @db.UnsignedInt
  shopId          Int?          @db.UnsignedInt
  name            String?       @db.VarChar(11)
  position        String?       @db.VarChar(11)
  role            Int?
  alias           String        @unique(map: "alias") @default("") @db.VarChar(20)
  email           String        @unique(map: "email") @default("") @db.VarChar(50)
  profileImg      String?       @db.VarChar(255)
  shop            Shop?         @relation(fields: [shopId], references: [id], onUpdate: NoAction, map: "Seller_ibfk_1")
  sizeRequestList SizeRequest[]

  @@index([shopId], map: "shopId")
}

model Shop {
  id              Int               @id @default(autoincrement()) @db.UnsignedInt
  brandId         Int?              @db.UnsignedInt
  email           String?           @unique(map: "email") @db.VarChar(255)
  alias           String            @unique(map: "alias") @default("") @db.VarChar(20)
  branch          String?           @db.VarChar(20)
  parcelCo        String?           @db.VarChar(20)
  phone           String?           @db.VarChar(20)
  detail          String?           @db.VarChar(20)
  building        String?           @db.VarChar(30)
  password        String?           @db.VarChar(255)
  createdAt       DateTime?         @default(now()) @db.Timestamp(0)
  updatedAt       DateTime?         @default(now()) @db.Timestamp(0)
  Customer        Customer[]
  CustomerAddress CustomerAddress[]
  sellerList      Seller[]
  brand           Brand?            @relation(fields: [brandId], references: [id], onUpdate: NoAction, map: "Shop_ibfk_1")
  sizeRequestList SizeRequest[]

  @@index([brandId], map: "brandId")
}

model SizeRequest {
  id               Int            @id @default(autoincrement()) @db.UnsignedInt
  uniqueId         String?        @unique(map: "uniqueId") @db.VarChar(16)
  shopId           Int            @db.UnsignedInt
  customerId       Int            @db.UnsignedInt
  sellerId         Int?           @db.UnsignedInt
  createdAt        DateTime?      @default(now()) @db.Timestamp(0)
  updatedAt        DateTime?      @default(now()) @db.Timestamp(0)
  Notification     Notification[]
  orderAddressList OrderAddress[]
  requestItemList  RequestItem[]
  shop             Shop           @relation(fields: [shopId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "SizeRequest_ibfk_1")
  customer         Customer       @relation(fields: [customerId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "SizeRequest_ibfk_2")
  seller           Seller?        @relation(fields: [sellerId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "SizeRequest_ibfk_3")

  @@index([customerId], map: "customerId")
  @@index([sellerId], map: "sellerId")
  @@index([shopId], map: "shopId")
}

model Tag {
  id   Int     @id @default(autoincrement()) @db.UnsignedInt
  name String? @db.VarChar(10)
}

model CustomerAddress {
  id            Int       @id @default(autoincrement()) @db.UnsignedInt
  customerId    Int?      @db.UnsignedInt
  shopId        Int?      @db.UnsignedInt
  buildingName  String?   @db.VarChar(255)
  lotAddress    String?   @db.VarChar(255)
  roadAddress   String?   @db.VarChar(255)
  detailAddress String?   @db.VarChar(255)
  placeName     String?   @db.VarChar(255)
  phone         String?   @db.VarChar(255)
  isDefault     Boolean?  @default(false)
  receipient    String?   @db.VarChar(10)
  createdAt     DateTime? @default(now()) @db.Timestamp(0)
  updatedAt     DateTime? @default(now()) @db.Timestamp(0)
  Customer      Customer? @relation(fields: [customerId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "CustomerAddress_ibfk_1")
  Shop          Shop?     @relation(fields: [shopId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "CustomerAddress_ibfk_2")

  @@index([customerId], map: "customerId")
  @@index([shopId], map: "shopId")
}

model OrderAddress {
  id              Int            @id @default(autoincrement()) @db.UnsignedInt
  uniqueId        String?        @unique(map: "uniqueId") @db.VarChar(16)
  requestId       Int?           @db.UnsignedInt
  type            String?        @db.VarChar(10)
  roadAddress     String?        @db.VarChar(255)
  lotAddress      String?        @db.VarChar(255)
  detailAddress   String?        @db.VarChar(255)
  placeName       String?        @db.VarChar(255)
  receipient      String?        @db.VarChar(255)
  phone           String?        @db.VarChar(255)
  dueDate         DateTime?      @db.Timestamp(0)
  parcelNo        String?        @db.VarChar(255)
  parcelCo        String?        @db.VarChar(255)
  hasNotied       Boolean?       @default(false)
  createdAt       DateTime?      @default(now()) @db.Timestamp(0)
  updatedAt       DateTime?      @default(now()) @db.Timestamp(0)
  Notification    Notification[]
  sizeRequest     SizeRequest?   @relation(fields: [requestId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "OrderAddress_ibfk_1")
  requestItemList RequestItem[]

  @@index([requestId], map: "requestId")
}

model Notification {
  id             Int           @id @default(autoincrement()) @db.UnsignedInt
  type           String?       @db.VarChar(10)
  requestId      Int?          @db.UnsignedInt
  uniqueId       String?       @unique(map: "uniqueId") @db.VarChar(16)
  orderAddressId Int?          @db.UnsignedInt
  hasRead        Boolean?
  isDummy        Boolean?
  createdAt      DateTime?     @default(now()) @db.Timestamp(0)
  orderAddress   OrderAddress? @relation(fields: [orderAddressId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "Notification_ibfk_2")
  sizeRequest    SizeRequest?  @relation(fields: [requestId], references: [id], onUpdate: NoAction, map: "Notification_ibfk_3")

  @@index([orderAddressId], map: "orderAddressId")
  @@index([requestId], map: "requestId")
}

model ProductCodeMap {
  id         Int     @id @default(autoincrement()) @db.UnsignedInt
  brandId    Int?    @db.UnsignedInt
  extractKey String? @db.VarChar(25)
  name       String? @db.VarChar(50)
  category   String? @db.VarChar(25)
  brand      Brand?  @relation(fields: [brandId], references: [id], onUpdate: NoAction, map: "ProductCodeMap_ibfk_1")

  @@index([brandId], map: "brandId")
}
